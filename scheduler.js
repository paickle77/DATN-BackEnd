// scheduler.js
require('dotenv').config();
const cron      = require('node-cron');
const nodemailer = require('nodemailer');
const api       = require('./routes/api');        // n·∫øu b·∫°n c·∫ßn g·ªçi service
const db        = require('./models/db');                // ensure DB ƒë√£ connect

// v√≠ d·ª• generateReportBuffer l·∫•y Excel/PDF t·ª´ service c·ªßa b·∫°n
const { generateReportBuffer } = require('./services/report.service');

const transporter = nodemailer.createTransport({
  host: process.env.SMTP_HOST,
  port: +process.env.SMTP_PORT,
  secure: false,
  auth: {
    user: process.env.SMTP_USER,
    pass: process.env.SMTP_PASS,
  },
});

cron.schedule('0 8 * * *', async () => {
  try {
    console.log('[Scheduler] B·∫Øt ƒë·∫ßu g·ª≠i b√°o c√°o t·ª± ƒë·ªông...');
    const buf = await generateReportBuffer();  // b·∫°n t·ª± tri·ªÉn khai trong report.service.js
    await transporter.sendMail({
      from: `"CakeShop" <${process.env.SMTP_USER}>`,
      to:   process.env.REPORT_RECEIVER,        // v√≠ d·ª• boss@cakeshop.com
      subject: 'üìä B√°o c√°o doanh thu h√†ng ng√†y',
      text:    'ƒê√≠nh k√®m b√°o c√°o doanh thu.',
      attachments: [
        { filename: 'Report.xlsx', content: buf }
      ]
    });
    console.log('[Scheduler] ƒê√£ g·ª≠i b√°o c√°o th√†nh c√¥ng');
  } catch (err) {
    console.error('[Scheduler] L·ªói khi g·ª≠i b√°o c√°o:', err);
  }
});
